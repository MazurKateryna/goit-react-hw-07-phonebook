{"version":3,"sources":["components/IsAlreadyTrue/isAlreadyTrueAnimation.module.css","components/Filter/FilterAnimation.module.css","redux/contacts/contactsAction.js","redux/contacts/contactsOperation.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/IsAlreadyTrue/IsAlreadyTrue.js","redux/contacts/contactsSelectors.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","getContactsRequest","getContactsSuccess","getContactsError","delContactRequest","delContactSuccess","delContactError","filter","addContact","name","number","dispatch","contactsAction","axios","post","then","respons","data","catch","error","getContacts","get","delContact","id","delete","mapDispatchToProps","onDelContact","contactsOperation","connect","contact","className","onClick","ContactList","contacts","TransitionGroup","component","map","CSSTransition","timeout","classNames","ContactForm","state","handleSubmit","e","preventDefault","props","changeIsAlready","onAddItem","setState","handleChange","target","value","onSubmit","this","onChange","type","maxLength","autoComplete","required","Component","onChangeFilter","IsAlreadyTrue","onChangeIsAlready","setTimeout","alert","getContactsSelector","app","getFilter","getLoading","loading","contactsArrayFilteredSel","createSelector","filterSelelector","toLowerCase","includes","getContactIsAlready","find","App","isAlready","contactsSelectors","contactsArrayFiltered","in","animationIsAlready","unmountOnExit","appear","length","FilterAnimation","contactsSelector","appFilter","createReducer","action","payload","appContacts","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a8e1bd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"isAlreadyTrueAnimation_enter__FMzj-\",\"enterActive\":\"isAlreadyTrueAnimation_enterActive__zJfVC\",\"exit\":\"isAlreadyTrueAnimation_exit__3_z58\",\"exitActive\":\"isAlreadyTrueAnimation_exitActive__ZNRoA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"FilterAnimation_enter__knhUt\",\"enterActive\":\"FilterAnimation_enterActive__oQ48X\",\"exit\":\"FilterAnimation_exit__2vGyU\",\"exitActive\":\"FilterAnimation_exitActive__3dBjS\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contact/addRequest\");\r\nconst addContactSuccess = createAction(\"contact/addSuccess\");\r\nconst addContactError = createAction(\"contact/addError\");\r\n\r\nconst getContactsRequest = createAction(\"contact/getRequest\");\r\nconst getContactsSuccess = createAction(\"contacts/getSuccess\");\r\nconst getContactsError = createAction(\"contacts/getError\");\r\n\r\nconst delContactRequest = createAction(\"contact/delRequest\");\r\nconst delContactSuccess = createAction(\"contact/delSuccess\");\r\nconst delContactError = createAction(\"contact/delError\");\r\n\r\nconst filter = createAction(\"app/filter\");\r\n\r\nexport default {\r\n addContactRequest,\r\n addContactSuccess,\r\n addContactError,\r\n getContactsRequest,\r\n getContactsSuccess,\r\n getContactsError,\r\n delContactRequest,\r\n delContactSuccess,\r\n delContactError,\r\n filter\r\n};\r\n","import axios from \"axios\";\r\nimport contactsAction from \"./contactsAction\";\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n dispatch(contactsAction.addContactRequest());\r\n axios\r\n  .post(\"http://localhost:2000/contacts\", { name, number })\r\n  .then(respons => dispatch(contactsAction.addContactSuccess(respons.data)))\r\n  .catch(error => dispatch(contactsAction.addContactError(error)));\r\n};\r\n\r\nconst getContacts = () => dispatch => {\r\n dispatch(contactsAction.getContactsRequest());\r\n\r\n axios\r\n  .get(\"http://localhost:2000/contacts\")\r\n  .then(respons => dispatch(contactsAction.getContactsSuccess(respons.data)))\r\n  .catch(error => dispatch(contactsAction.getContactsError(error)));\r\n};\r\n\r\nconst delContact = id => dispatch => {\r\n dispatch(contactsAction.delContactRequest());\r\n\r\n axios\r\n  .delete(\"http://localhost:2000/contacts/\" + id)\r\n  .then(dispatch(contactsAction.delContactSuccess(id)))\r\n  .catch(error => dispatch(contactsAction.delContactError(error)));\r\n};\r\n\r\nexport default { addContact, getContacts, delContact };\r\n","import React from \"react\";\r\nimport \"./ContactList.css\"\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperation from \"../../redux/contacts/contactsOperation\";\r\n\r\nlet ContactListItem = ({ contact, onDelContact, id }) => (\r\n <li className=\"ContactList-item\">\r\n\r\n  <span className=\"ContactList-text\">{contact.name}: {contact.number}</span>\r\n   <button\r\n    className=\"ContactList-button\"\r\n    onClick={() => {\r\n     onDelContact(id);\r\n    }}\r\n   >\r\n    Delete\r\n   </button>\r\n </li>\r\n);\r\n\r\nconst mapDispatchToProps = { onDelContact: contactsOperation.delContact };\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);","import React from \"react\";\r\nimport ContactListItem from \"./ContactListItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nlet ContactList = ({ contacts }) => (\r\n <section>\r\n  <TransitionGroup component=\"ul\" className=\"ContactList\">\r\n   {contacts.map(contact => (\r\n    <CSSTransition key={contact.id} timeout={200} classNames=\"ContactList-item\">\r\n     <ContactListItem contact={contact} id={contact.id} />\r\n    </CSSTransition>\r\n   ))}\r\n  </TransitionGroup>\r\n </section>\r\n);\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n contacts: PropTypes.array.isRequired\r\n};\r\n","import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperation from \"../../redux/contacts/contactsOperation\";\r\nimport \"./ContactForm.css\"\r\n\r\nclass ContactForm extends Component {\r\n state = {\r\n  name: \"\",\r\n  number: \"\"\r\n };\r\n\r\n handleSubmit = e => {\r\n  e.preventDefault();\r\n\r\n  this.props.changeIsAlready(this.state.name) && this.props.onAddItem(this.state.name, this.state.number);\r\n  this.setState(() => {\r\n   return { name: \"\", number: \"\" };\r\n  });\r\n };\r\n\r\n handleChange = e => {\r\n  let { value, name } = e.target;\r\n\r\n  this.setState(() => {\r\n   return { [name]: value };\r\n  });\r\n };\r\n\r\n render() {\r\n  return (\r\n   <form className=\"ContactEditor\" onSubmit={this.handleSubmit}>\r\n    <label className=\"ContactEditor-label\">\r\n     Name\r\n     <input\r\n      className=\"ContactEditor-input\"\r\n      onChange={this.handleChange}\r\n      value={this.state.name}\r\n      name=\"name\"\r\n      type=\"text\"\r\n      maxLength=\"12\"\r\n      autoComplete=\"off\"\r\n      required\r\n     />\r\n    </label>\r\n    <label className=\"ContactEditor-label\">\r\n     Number\r\n     <input\r\n      className=\"ContactEditor-input\"\r\n      onChange={this.handleChange}\r\n      value={this.state.number}\r\n      name=\"number\"\r\n      type=\"tel\"\r\n      autoComplete=\"off\"\r\n      maxLength=\"13\"\r\n     />\r\n    </label>\r\n    <button className=\"ContactEditor-button\">Add contact</button>\r\n   </form>\r\n  );\r\n }\r\n}\r\n\r\nconst mapDispatchToProps = { onAddItem: contactsOperation.addContact };\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport \"./Filter.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsAction from \"../../redux/contacts/contactsAction\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet Filter = ({ filter, onChangeFilter }) => {\r\n return (\r\n  <form className=\"filterEditor\">\r\n   <label className=\"filterLabel\">\r\n    Find contacts by name\r\n    <input\r\n     className=\"filterInput\"\r\n     onChange={e => onChangeFilter(e.target.value)}\r\n     value={filter}\r\n     name=\"filter\"\r\n     type=\"text\"\r\n     autoComplete=\"off\"\r\n    />\r\n   </label>\r\n  </form>\r\n );\r\n};\r\n\r\nconst mapDispatchToProps = { onChangeFilter: contactsAction.filter };\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n onChangeFilter: PropTypes.func.isRequired,\r\n filter: PropTypes.string\r\n};\r\n","import React from \"react\";\r\nimport \"./isAlreadyTrue.css\";\r\n\r\nlet IsAlreadyTrue = ({ onChangeIsAlready }) => {\r\n setTimeout(onChangeIsAlready, 3000);\r\n return <p className={alert}> Contact already exists!</p>;\r\n};\r\n\r\nexport default IsAlreadyTrue;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoading = state => state.app.loading;\r\nconst getContactsSelector = state => state.app.contacts;\r\nconst getFilter = state => state.app.filter;\r\n\r\nconst contactsArrayFilteredSel = createSelector(\r\n [getContactsSelector, getFilter],\r\n (contacts, filterSelelector) =>\r\n  contacts.filter(contact => contact.name.toLowerCase().includes(filterSelelector.toLowerCase()))\r\n);\r\n\r\nconst getContactIsAlready = createSelector([(state, name) => name, getContactsSelector], (name, contacts) =>\r\n contacts.find(contact => name === contact.name)\r\n);\r\n\r\nexport default {\r\n getLoading,\r\n getContactsSelector,\r\n getFilter,\r\n contactsArrayFilteredSel,\r\n getContactIsAlready\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport IsAlreadyTrue from \"./IsAlreadyTrue/IsAlreadyTrue\";\r\nimport \"./App.css\";\r\nimport animationIsAlready from \"./IsAlreadyTrue/isAlreadyTrueAnimation.module.css\";\r\nimport FilterAnimation from \"./Filter/FilterAnimation.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperation from \"../redux/contacts/contactsOperation\";\r\nimport contactsSelector from \"../redux/contacts/contactsSelectors\";\r\nimport contactsSelectors from \"../redux/contacts/contactsSelectors\";\r\n\r\nclass App extends Component {\r\n state = {\r\n  isAlready: false\r\n };\r\n\r\n componentDidMount() {\r\n  this.props.getContacts();\r\n }\r\n\r\n changeIsAlready = name => {\r\n  if (contactsSelectors.getContactIsAlready(this.props.state, name)) {\r\n   this.setState({ isAlready: true });\r\n   return false;\r\n  } else {\r\n   this.setState({ isAlready: false });\r\n  }\r\n  return true;\r\n };\r\n\r\n render() {\r\n  const { contacts, loading, contactsArrayFiltered } = this.props;\r\n\r\n  return (\r\n   <div className='wrapper'>\r\n    <CSSTransition\r\n     in={this.state.isAlready === true}\r\n     timeout={300}\r\n     classNames={animationIsAlready}\r\n     unmountOnExit\r\n    >\r\n      \r\n     <IsAlreadyTrue onChangeIsAlready={this.changeIsAlready} />\r\n    </CSSTransition>\r\n\r\n    <div className=\"header\">\r\n      <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames='fade'\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1 className='logo'>Phonebook</h1>\r\n      </CSSTransition>\r\n      </div>\r\n      \r\n     <ContactForm changeIsAlready={this.changeIsAlready} />\r\n\r\n     <CSSTransition in={contacts.length > 1} timeout={300} classNames={FilterAnimation} unmountOnExit>\r\n      <Filter />\r\n     </CSSTransition>\r\n     {loading && <h3>Loading...</h3>}\r\n     <ContactList contacts={contactsArrayFiltered} />\r\n    \r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n filter: contactsSelector.getFilter(state),\r\n contacts: contactsSelectors.getContactsSelector(state),\r\n loading: contactsSelectors.getLoading(state),\r\n contactsArrayFiltered: contactsSelectors.contactsArrayFilteredSel(state),\r\n state\r\n});\r\n\r\nlet mapDispatchToProps = { getContacts: contactsOperation.getContacts };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsAction from \"./contactsAction\";\r\n\r\nconst appFilter = createReducer(\"\", { [contactsAction.filter]: (state, action) => action.payload });\r\n\r\nconst appContacts = createReducer([], {\r\n [contactsAction.getContactsSuccess]: (state, action) => action.payload,\r\n [contactsAction.addContactSuccess]: (state, action) => [...state, action.payload],\r\n [contactsAction.delContactSuccess]: (state, action) => state.filter(contact => contact.id !== action.payload)\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n [contactsAction.addContactRequest]: () => true,\r\n [contactsAction.addContactSuccess]: () => false,\r\n [contactsAction.addContactError]: () => false,\r\n [contactsAction.getContactsRequest]: () => true,\r\n [contactsAction.getContactsSuccess]: () => false,\r\n [contactsAction.getContactsError]: () => false,\r\n [contactsAction.delContactRequest]: () => true,\r\n [contactsAction.delContactSuccess]: () => false,\r\n [contactsAction.delContactError]: () => false\r\n});\r\n\r\nexport default combineReducers({ filter: appFilter, contacts: appContacts, loading });\r\n","import app from \"../redux/contacts/contactsReducer\";\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: { app },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App.js\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}